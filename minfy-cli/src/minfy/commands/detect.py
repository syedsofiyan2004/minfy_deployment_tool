import json, sys, re
from pathlib import Path
import click
from rich.table import Table
from rich import print as rprint
from ..commands.config_cmd import CFG_FILE

DOCKER_TEMPLATES = {
    "vite": """\
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN (npm ci --legacy-peer-deps || npm install --legacy-peer-deps)
COPY . .
RUN npm run build
FROM alpine AS static
WORKDIR /static
COPY --from=build /app/dist .
""",
    "cra": """\
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN (npm ci --legacy-peer-deps || npm install --legacy-peer-deps)
COPY . .
RUN npm run build
FROM alpine AS static
WORKDIR /static
COPY --from=build /app/build .
""",
    "angular": """\
# --- generated by minfy ---  Angular CLI build
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN (npm ci --legacy-peer-deps || npm install --legacy-peer-deps)
COPY . .
RUN npm run build -- --configuration production
FROM alpine AS static
WORKDIR /static
COPY --from=build /app/{output_dir} .
""",
    "fallback": """\
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN (npm ci --legacy-peer-deps || npm install --legacy-peer-deps)
COPY . .
RUN {build_cmd}
FROM alpine AS static
WORKDIR /static
COPY --from=build /app/{output_dir} .
""",
}

def _pretty(plan: dict):
    tbl = Table(title="Build Plan")
    tbl.add_column("Key", style="cyan"); tbl.add_column("Value", style="magenta")
    for k, v in plan.items(): tbl.add_row(k, str(v))
    click.echo(tbl)


def _needs_docker(plan: dict) -> bool:
    if plan["builder"] in {"vite", "cra", "angular"}:
        return True
    return any(tok in plan["build_cmd"].lower() for tok in ("npm", "yarn", "pnpm", "ng "))


def _needs_env(app_dir: Path, pkg: dict | None) -> bool:
    if (app_dir / ".env.example").exists() or (app_dir / ".env.template").exists():
        return True
    gi = app_dir / ".gitignore"
    if gi.exists() and ".env" in gi.read_text(errors="ignore"):
        return True
    if pkg and "dotenv" in {**pkg.get("dependencies", {}), **pkg.get("devDependencies", {})}:
        return True
    for p in (app_dir / "src").rglob("*.[jt]s*"):
        try:
            if "process.env." in p.read_text(errors="ignore"):
                return True
        except Exception:
            pass
    return False

def _write_docker(app_dir: Path, plan: dict):
    if not plan["requires_docker"]:
        return
    df = app_dir / "Dockerfile.build"
    tpl = DOCKER_TEMPLATES.get(plan["builder"], DOCKER_TEMPLATES["fallback"])
    df.write_text(
        tpl.format(output_dir=plan["output_dir"], build_cmd=plan["build_cmd"]),
        encoding="utf-8",
    )
    click.secho("✓ Dockerfile.build written", fg="green")

@click.command("detect")
def detect_cmd():
    if not CFG_FILE.exists():
        click.secho("Run 'minfy init' first.", fg="red"); sys.exit(1)

    proj = json.loads(Path(CFG_FILE).read_text())
    app_dir = Path(proj["local_path"]) / proj["app_subdir"]

    if (app_dir / "angular.json").exists():
        ang = json.loads((app_dir / "angular.json").read_text())
        proj_name = ang.get("defaultProject") or list(ang["projects"])[0]
        plan = {"builder": "angular",
                "build_cmd": "npm run build -- --configuration production",
                "output_dir": f"dist/{proj_name}"}
        pkg = None
    else:
        pkg_json = app_dir / "package.json"
        if not pkg_json.exists():
            click.secho(f"No package.json in {app_dir}", fg="red"); sys.exit(1)
        pkg = json.loads(pkg_json.read_text())
        deps = {**pkg.get("dependencies", {}), **pkg.get("devDependencies", {})}
        scripts = pkg.get("scripts", {})
        if "react-scripts" in deps:
            plan = {"builder": "cra", "build_cmd": "npm run build", "output_dir": "build"}
        elif "vite" in deps or re.search(r"\bvite\b", scripts.get("build", "")):
            plan = {"builder": "vite", "build_cmd": "npm run build", "output_dir": "dist"}
        else:
            plan = {"builder": "custom"}
            plan["output_dir"] = click.prompt("Output directory?", default="build")
            plan["build_cmd"]  = click.prompt("Build command?", default="npm run build")

    plan["requires_docker"] = _needs_docker(plan)
    plan["needs_env"] = _needs_env(app_dir, pkg)

    Path("build.json").write_text(json.dumps(plan, indent=2))
    _write_docker(app_dir, plan)
    click.secho("build.json created", fg="green")

    if plan["needs_env"]:
        click.secho(
            "⚠️  Env‑file likely required. Deploy with:\n"
            "    minfy deploy --env-file path/to/.env",
            fg="yellow",
        )
    rprint(
    "[bold]Next →[/bold] Configure vars with "
    "[cyan]minfy config set KEY=VALUE[/cyan] (or switch env with "
    "[cyan]minfy config env <name>[/cyan]), then run "
    "[cyan]minfy deploy[/cyan]."
)

