import json, sys, re
from pathlib import Path
import click
from rich.table import Table
from rich import print as rprint
from ..commands.config_cmd import CFG_FILE

DOCKER_TEMPLATES = {
    "vite": """\
# --- generated by minfy ---  Vite build
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then \\
        npm ci ; \\
    else \\
        npm install ; \\
    fi
COPY . .
RUN npm run build

FROM alpine AS static
WORKDIR /static
COPY --from=build /app/dist .
""",
    "cra": """\
# --- generated by minfy ---  CRA build
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then \\
        npm ci ; \\
    else \\
        npm install ; \\
    fi
COPY . .
RUN npm run build

FROM alpine AS static
WORKDIR /static
COPY --from=build /app/build .
""",
    "angular": """\
# --- generated by minfy ---  Angular CLI build
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then \\
        npm ci ; \\
    else \\
        npm install ; \\
    fi
COPY . .
RUN npm run build -- --configuration production

FROM alpine AS static
WORKDIR /static
COPY --from=build /app/{output_dir} .
""",
    "fallback": """\
# --- generated by minfy ---  Generic Node build
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then \\
        npm ci ; \\
    else \\
        npm install ; \\
    fi
COPY . .
RUN {build_cmd}

FROM alpine AS static
WORKDIR /static
COPY --from=build /app/{output_dir} .
""",
}


def _pretty(plan: dict):
    table = Table(title="Build Plan")
    table.add_column("Key", style="cyan")
    table.add_column("Value", style="magenta")
    for k, v in plan.items():
        table.add_row(k, str(v))
    click.echo(table)


def _needs_docker(plan: dict) -> bool:
    """Heuristic: Node/Angular builds require Docker for consistency."""
    if plan["builder"] in {"vite", "cra", "angular"}:
        return True
    cmd = plan["build_cmd"].lower()
    return any(tok in cmd for tok in ("npm", "yarn", "pnpm", "ng "))


def _write_dockerfile(app_dir: Path, plan: dict):
    if not plan["requires_docker"]:
        return

    df = app_dir / "Dockerfile.build"
    tpl_key = plan["builder"] if plan["builder"] in DOCKER_TEMPLATES else "fallback"
    tpl = DOCKER_TEMPLATES[tpl_key]
    df.write_text(
        tpl.format(output_dir=plan["output_dir"], build_cmd=plan["build_cmd"]),
        encoding="utf-8",
    )
    click.secho("✓ Dockerfile.build written", fg="green")


@click.command("detect")
def detect_cmd():
    if not CFG_FILE.exists():
        click.secho("Run 'minfy init' first.", fg="red")
        sys.exit(1)

    proj_cfg = json.loads(Path(CFG_FILE).read_text())
    app_dir = Path(proj_cfg["local_path"]) / proj_cfg["app_subdir"]

    if (app_dir / "angular.json").exists():
        ang = json.loads((app_dir / "angular.json").read_text())
        proj_name = ang.get("defaultProject") or list(ang["projects"])[0]
        plan = {
            "builder": "angular",
            "build_cmd": "npm run build -- --configuration production",
            "output_dir": f"dist/{proj_name}",
        }
    else:
        pkg_json = app_dir / "package.json"
        if not pkg_json.exists():
            click.secho(f"No package.json in {app_dir}", fg="red")
            sys.exit(1)

        pkg = json.loads(pkg_json.read_text())
        deps = {**pkg.get("dependencies", {}), **pkg.get("devDependencies", {})}
        scripts = pkg.get("scripts", {})

        if "react-scripts" in deps:
            plan = {
                "builder": "cra",
                "build_cmd": "npm run build",
                "output_dir": "build",
            }
        elif "vite" in deps or re.search(r"\bvite\b", scripts.get("build", "")):
            plan = {
                "builder": "vite",
                "build_cmd": "npm run build",
                "output_dir": "dist",
            }
        else:
            plan = {"builder": "custom"}
            plan["output_dir"] = click.prompt("Output directory?", default="build")
            plan["build_cmd"] = click.prompt("Build command?", default="npm run build")

    plan["requires_docker"] = _needs_docker(plan)

    Path("build.json").write_text(json.dumps(plan, indent=2))
    _write_dockerfile(app_dir, plan)
    click.secho("✓ build.json created", fg="green")
    rprint("[bold]Next →[/bold] Run [cyan]minfy deploy[/cyan].")
